#!/usr/bin/env node

/**
 * Hello World MCP Server
 * A minimal MCP server template generated by openapi-to-mcp
 */

// @ts-expect-error - MCP SDK types may not be fully resolved
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
// @ts-expect-error - MCP SDK types may not be fully resolved
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
// @ts-expect-error - MCP SDK types may not be fully resolved
import {
  ListToolsRequestSchema,
  CallToolRequestSchema,
  type Tool,
} from '@modelcontextprotocol/sdk/types.js';

/**
 * Create and configure the MCP server
 */
async function main(): Promise<void> {
  // Create server instance
  const server = new Server(
    {
      name: 'hello-world-mcp',
      version: '1.0.0',
    },
    {
      capabilities: {
        tools: {},
      },
    }
  );

  // Register the hello tool
  server.setRequestHandler(ListToolsRequestSchema, async () => {
    return {
      tools: [
        {
          name: 'hello',
          description: 'Returns a friendly greeting from the MCP server',
          inputSchema: {
            type: 'object',
            properties: {},
          },
        } as Tool,
      ],
    };
  });

  // Handle tool calls
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  server.setRequestHandler(CallToolRequestSchema, async (request: any) => {
    if (request.params.name === 'hello') {
      return {
        content: [
          {
            type: 'text',
            text: 'Hello from MCP!',
          },
        ],
      };
    }

    throw new Error(`Unknown tool: ${request.params.name}`);
  });

  // Connect to stdio transport
  const transport = new StdioServerTransport();
  await server.connect(transport);

  // Log server start (to stderr, not stdout which is used for MCP protocol)
  // eslint-disable-next-line no-console
  console.error('Hello World MCP Server started successfully');
}

// Run the server
main().catch((error) => {
  // eslint-disable-next-line no-console
  console.error('Server error:', error);
  process.exit(1);
});
